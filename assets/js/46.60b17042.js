(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{224:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_040：如何理解eventloop——宏任务和微任务篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_040：如何理解eventloop——宏任务和微任务篇","aria-hidden":"true"}},[t._v("#")]),t._v(" 040：如何理解EventLoop——宏任务和微任务篇")]),t._v(" "),a("h2",{attrs:{id:"宏任务-macrotask-引入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#宏任务-macrotask-引入","aria-hidden":"true"}},[t._v("#")]),t._v(" 宏任务(MacroTask)引入")]),t._v(" "),a("p",[t._v("在 JS 中，大部分的任务都是在主线程上执行，常见的任务有:")]),t._v(" "),a("ol",[a("li",[t._v("渲染事件")]),t._v(" "),a("li",[t._v("用户交互事件")]),t._v(" "),a("li",[t._v("js脚本执行")]),t._v(" "),a("li",[t._v("网络请求、文件读写完成事件等等。")])]),t._v(" "),a("p",[t._v("为了让这些事件有条不紊地进行，JS引擎需要对之执行的顺序做一定的安排，V8 其实采用的是一种"),a("code",[t._v("队列")]),t._v("的方式来存储这些任务，\n即先进来的先执行。模拟如下:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("bool keep_running "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MainTherad")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//执行队列中的任务")]),t._v("\n    Task task "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" task_queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("takeTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ProcessTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//执行延迟队列中的任务")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ProcessDelayTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("keep_running"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果设置了退出标志，那么直接退出线程循环")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这里用到了一个 for 循环，将队列中的任务一一取出，然后执行，这个很好理解。但是其中包含了两种任务队列，除了上述提到的任务队列， 还有一个延迟队列，它专门处理诸如setTimeout/setInterval这样的定时器回调任务。")]),t._v(" "),a("p",[t._v("上述提到的，普通任务队列和延迟队列中的任务，都属于"),a("strong",[t._v("宏任务")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"微任务-microtask-引入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微任务-microtask-引入","aria-hidden":"true"}},[t._v("#")]),t._v(" 微任务(MicroTask)引入")]),t._v(" "),a("p",[t._v("对于每个宏任务而言，其内部都有一个微任务队列。那为什么要引入微任务？微任务在什么时候执行呢？")]),t._v(" "),a("p",[t._v("其实引入微任务的初衷是为了解决异步回调的问题。想一想，对于异步回调的处理，有多少种方式？总结起来有两点:")]),t._v(" "),a("ol",[a("li",[t._v("将异步回调进行宏任务队列的入队操作。")]),t._v(" "),a("li",[t._v("将异步回调放到当前宏任务的末尾。")])]),t._v(" "),a("p",[t._v("如果采用第一种方式，那么执行回调的时机应该是在前面"),a("code",[t._v("所有的宏任务")]),t._v("完成之后，倘若现在的任务队列非常长，那么回调迟迟得不到执行，造成"),a("code",[t._v("应用卡顿")]),t._v("。")]),t._v(" "),a("p",[t._v("为了规避这样的问题，V8 引入了第二种方式，这就是"),a("code",[t._v("微任务")]),t._v("的解决方式。在每一个宏任务中定义一个"),a("strong",[t._v("微任务队列")]),t._v("，当该宏任务执行完成，会检查其中的微任务队列，如果为空则直接执行下一个宏任务，如果不为空，则"),a("code",[t._v("依次执行微任务")]),t._v("，执行完成才去执行下一个宏任务。")]),t._v(" "),a("p",[t._v("常见的微任务有MutationObserver、Promise.then(或.reject) 以及以 Promise 为基础开发的其他技术(比如fetch API), 还包括 V8 的垃圾回收过程。")]),t._v(" "),a("p",[t._v("Ok, 这便是"),a("code",[t._v("宏任务")]),t._v("和"),a("code",[t._v("微任务")]),t._v("的概念，接下来正式介绍JS非常重要的运行机制——EventLoop。")])])}),[],!1,null,null,null);s.default=e.exports}}]);